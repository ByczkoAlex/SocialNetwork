{"version":3,"sources":["components/profile/ProfileInfo/ProfileInfo.module.css","components/profile/myPosts/myPosts.module.css","components/profile/myPosts/posts/Post.module.css","components/profile/ProfileStatus/ProfileStatusWithHooks.tsx","components/profile/ProfileInfo/ProfileInfo.tsx","components/profile/myPosts/posts/Post.tsx","components/profile/AddPostForm/AddPostForm.tsx","components/profile/myPosts/myPosts.tsx","components/profile/myPosts/posts/myPostsContainer.tsx","components/profile/Profile.tsx","components/profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","ProfileInfo","profile","Preloader","className","s","image","src","descriptionBlock","photos","large","users","avatar","isOwner","type","target","files","length","savePhoto","Post","item","alt","message","likes","maxLength10","maxLengthCreator","AddPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","name","placeholder","validate","requiredField","MyPosts","React","memo","postsElements","posts","map","p","key","id","postsBlock","values","addPost","newPost","MyPostsContainer","connect","state","ProfileReducer","profilePage","postsData","dispatch","AddPostActionCreator","Profile","ProfileContainer","userId","Number","this","match","params","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","authorizedUserId","AuthReducer","isAuth","withRouter","WithAusRedirect"],"mappings":"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","file":"static/js/3.3db00348.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"image\":\"ProfileInfo_image__1Qyp-\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3FkFc\",\"avatar\":\"ProfileInfo_avatar__2DqPX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"myPosts_postsBlock__j_Att\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3Ttj9\",\"image\":\"Post_image__2BarW\"};","import React, {ChangeEvent, useState, useEffect} from 'react'\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: PropsType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    },[props.status])\r\n\r\n    const activateMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const OnStatusChange = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateMode}>{props.status ? props.status : 'No Status'}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={OnStatusChange} onBlur={deactivateEditMode} autoFocus={true} value={status}></input>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n//\r\n// const UpdateStatusForm: React.FC<InjectedFormProps<any>> = (props: any) => {\r\n//     return (\r\n//         <form onSubmit={props.handleSubmit}>\r\n//             <div>\r\n//                 <Field component={\"textarea\"} name={\"newStatus\"} placeholder={\"enter your status\"}/>\r\n//             </div>\r\n//         </form>\r\n//     )\r\n// }\r\n//\r\n// const UpdateStatusFormRedux = reduxForm<any>({form: \"DialogAddMessageForm\"})(UpdateStatusForm)\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import React, {ChangeEvent} from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport Preloader from \"../../../common/Preloader/Preloader\";\r\nimport {ProfileAPIType} from \"../../../redux/profileReducer\";\r\nimport ProfileStatusWithHooks from \"../ProfileStatus/ProfileStatusWithHooks\";\r\nimport users from \"../../../assets/images/users.png\"\r\n\r\ntype profileType = {\r\n    profile: ProfileAPIType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner:boolean\r\n    savePhoto: (file: any)=> void\r\n}\r\n\r\nexport function ProfileInfo(props: profileType) {\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e:any) => {\r\n        if(e.target.files.length){\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img className={s.image} src=\"https://onlinepngtools.com/images/examples-onlinepngtools/desert.jpg\"/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={props.profile.photos.large || users} className={s.avatar}/>\r\n                { props.isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\r\n                <ProfileStatusWithHooks\r\n                    updateStatus={props.updateStatus}\r\n                    status={props.status}/>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n\r\n}","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likes: string\r\n}\r\n\r\nexport function Post (props: PropsType) {\r\n    return (\r\n        <div className={s.item}>\r\n            <img className={s.image} src=\"https://source.unsplash.com/random/800x600\" alt=\"\"/>\r\n            <div>\r\n                {props.message}\r\n            </div>\r\n            <div>\r\n                {props.likes}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../../common/FormControll/FormControll\";\r\nimport {maxLengthCreator, requiredField} from \"../../../utils/validators/validators\";\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<any>> = (props:any) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name={\"newPost\"} placeholder={\"enter your post\"}\r\n                       validate={[requiredField, maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button type=\"submit\">Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddPostFormRedux = reduxForm<any>({form: \"DialogAddMessageForm\"})(AddPostForm)\r\n","import React from 'react';\r\nimport s from './myPosts.module.css'\r\nimport {Post} from \"./posts/Post\";\r\nimport {MapDispatchToPropsType, MapStateToPropsType} from \"./posts/myPostsContainer\";\r\nimport {AddPostFormRedux} from \"../AddPostForm/AddPostForm\";\r\n\r\nexport const MyPosts = React.memo((props: MapStateToPropsType & MapDispatchToPropsType) => {\r\n    let posts = props.posts;\r\n    let postsElements = posts.map((p: PostType) => <Post key={p.id} message={p.message}\r\n                                                         likes={p.likes}/>);\r\n\r\n\r\n    const AddNewPost = (values: any) => {\r\n        props.addPost(values.newPost)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h2>My Posts</h2>\r\n            <div>\r\n                New post\r\n            </div>\r\n            <div>\r\n                <AddPostFormRedux onSubmit={AddNewPost}/>\r\n            </div>\r\n\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likes: string\r\n}\r\n","import React, {Dispatch} from 'react';\r\nimport {MyPosts} from \"../myPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {ActionsTypes, RootStateRedux} from \"../../../../redux/redux-store\";\r\nimport {AddPostActionCreator} from \"../../../../redux/profileReducer\";\r\n\r\nexport type myPosts = {\r\n    postsData: Array<PostType>\r\n    newPostText: string\r\n\r\n}\r\n\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likes: string\r\n}\r\n\r\nexport type OwnProps = {\r\n\r\n}\r\n\r\nexport type MapStateToPropsType = {\r\n    posts: Array<PostType>\r\n}\r\n\r\nexport type MapDispatchToPropsType = {\r\n    addPost: (newPostText:string) => void\r\n}\r\n\r\n\r\nconst mapStateToProps = (state:RootStateRedux) => {\r\n    return {\r\n        posts: state.ProfileReducer.profilePage.postsData,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch:  Dispatch<ActionsTypes>) => {\r\n    return {\r\n        addPost: (newPost: string) => {\r\n            dispatch(AddPostActionCreator(newPost));\r\n        },\r\n    }\r\n};\r\n\r\nexport const MyPostsContainer = connect<MapStateToPropsType, MapDispatchToPropsType, OwnProps, RootStateRedux>(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\n","import React from 'react';\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./myPosts/posts/myPostsContainer\";\r\nimport {ProfileAPIType,} from \"../../redux/profileReducer\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileAPIType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner:boolean\r\n    savePhoto: (file: any)=> void\r\n}\r\n\r\n\r\nexport function Profile(props: ProfilePropsType) {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                isOwner={props.isOwner}\r\n                status={props.status}\r\n                profile={props.profile}\r\n                updateStatus={props.updateStatus}\r\n                savePhoto={props.savePhoto}\r\n            />\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}","import React, {ComponentClass} from 'react';\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport { RootStateRedux} from \"../../redux/redux-store\";\r\nimport {getStatus, getUserProfile, ProfileAPIType, savePhoto, updateStatus} from \"../../redux/profileReducer\";\r\nimport {withRouter, RouteComponentProps} from \"react-router-dom\";\r\nimport {WithAusRedirect} from \"../HOC/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileAPIType | null\r\n    status: string,\r\n    authorizedUserId: number | null,\r\n    isAuth: boolean | null\r\n\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile : (userId: number) => void\r\n    getStatus: (userId : number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: any)=> void\r\n}\r\n\r\ntype ProfileContainerType = MapStateToPropsType & MapDispatchToPropsType  & RouteComponentProps<{userId: string}>\r\n\r\nclass ProfileContainer extends React.Component <ProfileContainerType>{\r\n\r\n    refreshProfile() {\r\n        let userId = Number(this.props.match.params.userId)\r\n        if ( !userId ) {\r\n            userId = 10938\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.profile && <Profile\r\n                    isOwner={!this.props.match.params.userId}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateStatus}\r\n                    profile={this.props.profile}\r\n                    savePhoto={this.props.savePhoto}\r\n                />}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateRedux): MapStateToPropsType => ({\r\n    profile: state.ProfileReducer.profilePage.profile,\r\n    status: state.ProfileReducer.profilePage.status,\r\n    authorizedUserId: state.AuthReducer.id,\r\n    isAuth: state.AuthReducer.isAuth\r\n})\r\n\r\nexport default compose(\r\n    connect <MapStateToPropsType,MapDispatchToPropsType, {}, RootStateRedux>(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto}),\r\n    withRouter,\r\n    WithAusRedirect\r\n)(ProfileContainer) as ComponentClass;\r\n"],"sourceRoot":""}
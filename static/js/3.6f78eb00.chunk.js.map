{"version":3,"sources":["components/profile/ProfileInfo/ProfileInfo.module.css","assets/images/img.jpg","components/profile/myPosts/myPosts.module.css","components/profile/myPosts/posts/Post.module.css","components/profile/ProfileStatus/ProfileStatusWithHooks.tsx","../node_modules/redux-form/es/Form.js","components/profile/ProfileInfo/ProfileDataForm.tsx","components/profile/ProfileInfo/ProfileInfo.tsx","components/profile/myPosts/posts/Post.tsx","components/profile/AddPostForm/AddPostForm.tsx","components/profile/myPosts/myPosts.tsx","components/profile/myPosts/posts/myPostsContainer.tsx","components/profile/Profile.tsx","components/profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","Form","_Component","_this","call","this","_reduxForm","Error","_inheritsLoose","_proto","prototype","componentDidMount","registerInnerOnSubmit","onSubmit","componentDidUpdate","prevProps","render","_this$props","rest","_objectWithoutPropertiesLoose","React","createElement","Component","propTypes","PropTypes","func","isRequired","object","withReduxForm","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","createField","Input","type","Textarea","aboutMe","Object","keys","initialValues","contacts","map","key","className","s","contact","ProfileInfo","profile","Preloader","image","src","Img","descriptionBlock","photos","large","users","avatar","isOwner","target","files","length","savePhoto","FormData","saveProfile","goToEditMode","ProfileData","onClick","fullName","lookingForAJob","lookingForAJobDescription","contactTitle","contactValue","Contact","Post","item","alt","message","likes","maxLength10","maxLengthCreator","AddPostFormRedux","Field","component","name","placeholder","validate","requiredField","MyPosts","memo","postsElements","posts","p","id","postsBlock","values","addPost","newPost","actions","AddPostActionCreator","MyPostsContainer","DeletePost","connect","state","ProfileReducer","profilePage","postsData","Profile","ProfileContainer","userId","Number","match","params","getUserProfile","getStatus","refreshProfile","prevState","snapshot","compose","authorizedUserId","AuthReducer","isAuth","withRouter","WithAusRedirect"],"mappings":"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","file":"static/js/3.6f78eb00.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"image\":\"ProfileInfo_image__1Qyp-\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3FkFc\",\"avatar\":\"ProfileInfo_avatar__2DqPX\",\"contact\":\"ProfileInfo_contact__N1nJK\"};","module.exports = __webpack_public_path__ + \"static/media/img.ed4824fb.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"myPosts_postsBlock__j_Att\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3Ttj9\",\"image\":\"Post_image__2BarW\"};","import React, {ChangeEvent, useState, useEffect} from 'react'\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: PropsType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    },[props.status])\r\n\r\n    const activateMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const OnStatusChange = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <b>Status: </b><span onDoubleClick={activateMode}>{props.status ? props.status : 'No Status'}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={OnStatusChange} onBlur={deactivateEditMode} autoFocus={true} value={status}></input>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n//\r\n// const UpdateStatusForm: React.FC<InjectedFormProps<any>> = (props: any) => {\r\n//     return (\r\n//         <form onSubmit={props.handleSubmit}>\r\n//             <div>\r\n//                 <Field component={\"textarea\"} name={\"newStatus\"} placeholder={\"enter your status\"}/>\r\n//             </div>\r\n//         </form>\r\n//     )\r\n// }\r\n//\r\n// const UpdateStatusFormRedux = reduxForm<any>({form: \"DialogAddMessageForm\"})(UpdateStatusForm)\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/inheritsLoose\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withReduxForm } from './ReduxFormContext';\n\nvar Form = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(Form, _Component);\n\n  function Form(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n\n    if (!props._reduxForm) {\n      throw new Error('Form must be inside a component decorated with reduxForm()');\n    }\n\n    return _this;\n  }\n\n  var _proto = Form.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.props._reduxForm.registerInnerOnSubmit(this.props.onSubmit);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    if (this.props.onSubmit !== prevProps.onSubmit) {\n      this.props._reduxForm.registerInnerOnSubmit(this.props.onSubmit);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        _reduxForm = _this$props._reduxForm,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"_reduxForm\"]);\n\n    return /*#__PURE__*/React.createElement(\"form\", rest);\n  };\n\n  return Form;\n}(Component);\n\nForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  _reduxForm: PropTypes.object\n};\nexport default withReduxForm(Form);","import React from \"react\";\r\nimport ProfileStatusWithHooks from \"../ProfileStatus/ProfileStatusWithHooks\";\r\nimport {Form, reduxForm} from \"redux-form\";\r\nimport {createField, Input, Textarea} from \"../../../common/FormControll/FormControll\";\r\nimport s from './ProfileInfo.module.css'\r\n\r\n\r\nexport const ProfileDataForm = (props: any) => {\r\n    return <Form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <button>Save</button>\r\n        </div>\r\n        <div>\r\n            <b>Full name</b>: {createField(\"Full name\", [], \"FullName\", Input, null, null)}\r\n        </div>\r\n        <ProfileStatusWithHooks\r\n            updateStatus={props.updateStatus}\r\n            status={props.status}/>\r\n        <div>\r\n            <b>Looking for a job</b>:\r\n            {createField(\"lookingForAJob\", [], \"lookingForAJob\", Input, {type: \"checkbox\"}, null)}\r\n        </div>\r\n        <div>\r\n            <b>My professional skills</b>:\r\n            {createField(\"My professional skills\", [], \"lookingForAJobDescription\", Textarea, null, null)}\r\n        </div>\r\n        <div>\r\n            <b>About Me</b> : {props.aboutMe}\r\n            {createField(\"About Me\", [], \"aboutMe\", Textarea, null, null)}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(props.initialValues.contacts).map(key => {\r\n            debugger\r\n            return <div key={key} className={s.contact}>\r\n                <b>{key}: {createField(key, [], \"contacts.\" + key, Input, null, null)}</b>\r\n            </div>\r\n        })}\r\n        </div>\r\n    </Form>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({form: 'edit-profile'})(ProfileDataForm) as any\r\n\r\nexport default ProfileDataFormReduxForm","import React, {useState} from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport Preloader from \"../../../common/Preloader/Preloader\";\r\nimport {ProfileAPIType} from \"../../../redux/profileReducer\";\r\nimport ProfileStatusWithHooks from \"../ProfileStatus/ProfileStatusWithHooks\";\r\nimport users from \"../../../assets/images/users.png\"\r\nimport ProfileDataFormReduxForm from \"./ProfileDataForm\";\r\nimport Img from \"../../../assets/images/img.jpg\"\r\n\r\nexport type profileType = {\r\n    profile: ProfileAPIType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: any) => void\r\n    saveProfile: (FormData: any) => void\r\n}\r\n\r\n\r\nexport function ProfileInfo(props: profileType) {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: any) => {\r\n        if (e.target.files.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (FormData : any) => {\r\n        props.saveProfile(FormData)\r\n        setEditMode(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img className={s.image} src={Img}/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={props.profile.photos.large || users} className={s.avatar}/>\r\n                {props.isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\r\n                <div>\r\n                    {editMode ? <ProfileDataFormReduxForm initialValues={props.profile}\r\n                                                          onSubmit={onSubmit}\r\n                                                          status={props.status}\r\n                                                          updateStatus={props.updateStatus}\r\n                                                          isOwner={props.isOwner}\r\n                                                          goToEditMode={() => {\r\n                                                              setEditMode(false)\r\n                                                          }}\r\n                                                          aboutMe={props.profile.aboutMe}/>\r\n                        : <ProfileData profile={props.profile}\r\n                                       status={props.status}\r\n                                       updateStatus={props.updateStatus}\r\n                                       isOwner={props.isOwner}\r\n                                       goToEditMode={() => {\r\n                                           setEditMode(true)\r\n                                       }}/>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ProfileData = (props: any) => {\r\n\r\n    return <div>\r\n        {props.isOwner && <div>\r\n            <button onClick={props.goToEditMode}>Edit</button>\r\n        </div>}\r\n        {props.profile && <div>\r\n            <b>Full name</b>: {props.profile.fullName}\r\n        </div>}\r\n        <ProfileStatusWithHooks\r\n            updateStatus={props.updateStatus}\r\n            status={props.status}/>\r\n        {props.profile && <div>\r\n            <b>Looking for a job</b>: {props.profile.lookingForAJob ? \"yes\" : \"no\"}\r\n        </div>}\r\n        {props.profile.lookingForAJob &&\r\n        <div>\r\n            <b>My professional skills</b>: {props.profile.lookingForAJobDescription}\r\n        </div>\r\n        }\r\n        <div>\r\n            <b>About Me</b>: {props.profile.aboutMe}\r\n        </div>\r\n        {props.profile && <div>\r\n            <b>Contacts</b>: {Object.keys(props.profile.contacts).map(key => {\r\n            // @ts-ignore\r\n            return <Contact key={key} contactTitle={key} contactValue={props.profile.contacts[key]}/>\r\n        })}\r\n        </div>}\r\n    </div>\r\n}\r\n\r\nconst Contact = (props: any) => {\r\n    return <div className={s.contact}><b>{props.contactTitle}</b> : {props.contactValue} </div>\r\n}","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likes: string\r\n}\r\n\r\nexport function Post (props: PropsType) {\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <img className={s.image} src=\"https://source.unsplash.com/random/800x600\" alt=\"\"/>\r\n            <div>\r\n                {props.message}\r\n            </div>\r\n            <div>\r\n                {props.likes}\r\n            </div>\r\n            <button>delete post</button>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../../common/FormControll/FormControll\";\r\nimport {maxLengthCreator, requiredField} from \"../../../utils/validators/validators\";\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<any>> = (props:any) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name={\"newPost\"} placeholder={\"enter your post\"}\r\n                       validate={[requiredField, maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button type=\"submit\">Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddPostFormRedux = reduxForm<any>({form: \"DialogAddMessageForm\"})(AddPostForm)\r\n","import React from 'react';\r\nimport s from './myPosts.module.css'\r\nimport {Post} from \"./posts/Post\";\r\nimport {MapDispatchToPropsType, MapStateToPropsType} from \"./posts/myPostsContainer\";\r\nimport {AddPostFormRedux} from \"../AddPostForm/AddPostForm\";\r\n\r\nexport const MyPosts = React.memo((props: MapStateToPropsType & MapDispatchToPropsType) => {\r\n    let posts = props.posts;\r\n    let postsElements = posts.map((p: PostType) => <Post key={p.id} message={p.message}\r\n                                                         likes={p.likes}/>);\r\n\r\n\r\n    const AddNewPost = (values: any) => {\r\n        props.addPost(values.newPost)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h2>My Posts</h2>\r\n            <div>\r\n                New post\r\n            </div>\r\n            <div>\r\n                <AddPostFormRedux onSubmit={AddNewPost}/>\r\n            </div>\r\n\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likes: string\r\n}\r\n","import React from 'react';\r\nimport {MyPosts} from \"../myPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateRedux} from \"../../../../redux/redux-store\";\r\nimport {actions} from \"../../../../redux/profileReducer\";\r\n\r\nexport type myPosts = {\r\n    postsData: Array<PostType>\r\n    newPostText: string\r\n\r\n}\r\n\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likes: string\r\n}\r\n\r\nexport type OwnProps = {\r\n\r\n}\r\n\r\nexport type MapStateToPropsType = {\r\n    posts: Array<PostType>\r\n}\r\n\r\nexport type MapDispatchToPropsType = {\r\n    addPost: (newPostText:string) => void\r\n}\r\n\r\n\r\nconst mapStateToProps = (state:RootStateRedux) => {\r\n    return {\r\n        posts: state.ProfileReducer.profilePage.postsData,\r\n    };\r\n};\r\n//\r\n// const mapDispatchToProps = (dispatch:  Dispatch<InferActionsTypes>) => {\r\n//     return {\r\n//         addPost: (newPost: string) => {\r\n//             dispatch(actions.AddPostActionCreator(newPost));\r\n//         },\r\n//     }\r\n// };\r\nconst addPost = actions.AddPostActionCreator\r\nconst deletePost = actions.DeletePost\r\n\r\nexport const MyPostsContainer = connect<MapStateToPropsType, MapDispatchToPropsType, OwnProps, RootStateRedux>(mapStateToProps, {addPost})(MyPosts);\r\n\r\n","import React from 'react';\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./myPosts/posts/myPostsContainer\";\r\nimport {ProfileAPIType,} from \"../../redux/profileReducer\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileAPIType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner:boolean\r\n    savePhoto: (file: any)=> void\r\n    saveProfile: (FormData: any) => void\r\n}\r\n\r\n\r\nexport function Profile(props: ProfilePropsType) {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                saveProfile={props.saveProfile}\r\n                isOwner={props.isOwner}\r\n                status={props.status}\r\n                profile={props.profile}\r\n                updateStatus={props.updateStatus}\r\n                savePhoto={props.savePhoto}\r\n            />\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}","import React, {ComponentClass} from 'react';\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport { RootStateRedux} from \"../../redux/redux-store\";\r\nimport {\r\n    getStatus,\r\n    getUserProfile,\r\n    ProfileAPIType,\r\n    savePhoto,\r\n    saveProfile,\r\n    updateStatus\r\n} from \"../../redux/profileReducer\";\r\nimport {withRouter, RouteComponentProps} from \"react-router-dom\";\r\nimport {WithAusRedirect} from \"../HOC/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileAPIType | null\r\n    status: string,\r\n    authorizedUserId: number | null,\r\n    isAuth: boolean | null\r\n\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile : (userId: number) => void\r\n    getStatus: (userId : number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: any)=> void\r\n    saveProfile: (FormData: any) => void\r\n}\r\n\r\ntype ProfileContainerType = MapStateToPropsType & MapDispatchToPropsType  & RouteComponentProps<{userId: string}>\r\n\r\nclass ProfileContainer extends React.Component <ProfileContainerType>{\r\n\r\n    refreshProfile() {\r\n        let userId = Number(this.props.match.params.userId)\r\n        if ( !userId ) {\r\n            userId = 10938\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.profile && <Profile\r\n                    saveProfile={this.props.saveProfile}\r\n                    isOwner={!this.props.match.params.userId}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateStatus}\r\n                    profile={this.props.profile}\r\n                    savePhoto={this.props.savePhoto}\r\n                />}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateRedux): MapStateToPropsType => ({\r\n    profile: state.ProfileReducer.profilePage.profile,\r\n    status: state.ProfileReducer.profilePage.status,\r\n    authorizedUserId: state.AuthReducer.id,\r\n    isAuth: state.AuthReducer.isAuth\r\n})\r\n\r\n\r\nexport default compose(\r\n    connect <MapStateToPropsType,MapDispatchToPropsType, {}, RootStateRedux>(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n    WithAusRedirect\r\n)(ProfileContainer) as ComponentClass;\r\n"],"sourceRoot":""}